form#hiddenDeleteForm method="post" style="display:none;"
  input type="hidden" name="_method" value="delete"
  input type="hidden" name="authenticity_token" value="#{form_authenticity_token}"
  
.container.col 
  h1 Equipment Inventory
  i.fa-solid.fa-toolbox.space-bot-xl style="font-size: 7rem"
  
  = link_to  "equipment_inventories/new", class: 'add-button' do
    i.fa-solid.fa-wrench
    |  Add Equipment 
  br
  br  
  table.dark-table style= "width: 900px"
    thead
      tr
        th.sortable data-sort="name"  Equipment Name <i class="fa fa-sort"></i>
        th.sortable data-sort="id"    Equipment ID <i class="fa fa-sort"></i>
        th.sortable data-sort="status" Availability <i class="fa fa-sort"></i>
        th Check-In/Out
        th Actions
    tbody
      - @equipment_inventories.each do |equipment|
        tr data-name=equipment.equipment_name data-id=equipment.equipment_id data-status=(equipment.checked_in? ? "IN" : "OUT")
          td = equipment.equipment_name
          td = equipment.equipment_id
          td class="status-cell" id="status-#{equipment.id}"
            i.fa class=(equipment.checked_in? ? "fa-check-circle" : "fa-exclamation-circle") aria-hidden="true"
            span.status-text
              - if equipment.checked_in?
                |  IN
              - else
                |  OUT
          td
            /## TOGGLE SWITCH ##
            .center-div style="display: flex; justify-content: center"  
              .toggle-switch 
                input.toggle-switch-checkbox type="checkbox" id="toggle-#{equipment.id}" checked=(equipment.checked_in?) data-id=equipment.id data-status=(equipment.checked_in? ? "Check Out" : "Check In")
                label.toggle-switch-label for="toggle-#{equipment.id}"

          td
            .container.no-pad
              = link_to "equipment_inventories/#{equipment.id}", class: 'view-button' do
                i.fa-solid.fa-eye
                |  View
                
              = link_to "equipment_inventories/#{equipment.id}/edit", class: 'edit-button' do 
                i.fa-solid.fa-pen-to-square
                |  Edit
                
              /## DELETE BUTTON ##  
              a.open-modal.delete-button data-url=equipment_inventory_path(equipment)
                i.fa-solid.fa-trash
                |  Delete   
                
  /## DASHBOARD BUTTON ## 
  .space-bot-m              
  = link_to '/', class: 'dashboard-button' do
    i.fa-solid.fa-house
    |  Back to Dashboard


/###############################################################################
/## MODAL SECTION ##
/###################    
#deleteModal.modal
  .modal-content
    h4.space-bot-xl style="color: black; font-size: 1.2rem" Are you sure you want to delete this equipment? 
    .modal-actions
      
      /## CONFIRM MODAL BUTTON ##
      = link_to '#', id: 'confirmDelete', class: 'delete-button' do
        i.fa-solid.fa-thumbs-up
        |  Yes, Delete 
      
      /## CANCEL MODAL BUTTON ##   
      a.btn.modal-close 
        i.fa-solid.fa-thumbs-down
        |  No, Cancel 
    
    
/###############################################################################
/## JAVASCRIPT SECTION ##
/########################          
javascript:
    $(document).ready(function () {
        $('.open-modal').on('click', function (e) {
            e.preventDefault();
            const deleteUrl = $(this).data('url');
            $('#hiddenDeleteForm').attr('action', deleteUrl);
            $('#deleteModal').show();
        });
        $('#confirmDelete').on('click', function (e) {
            e.preventDefault();
            $('#hiddenDeleteForm').submit();
        });
        $('.modal-close').on('click', function () {
            $('#deleteModal').hide();
        });
        // =============
        // Toggle switch
        // -------------
        $('.toggle-switch-checkbox').change(function () {
            const equipmentId   = $(this).data('id');
            const currentStatus = $(this).data('status');
            const newStatus     = currentStatus === "Check Out" ? "Check In" : "Check Out";
            const newStatusText = currentStatus === "Check In"  ? " IN" : " OUT";
            const newIconClass  = currentStatus === "Check In"  ? "fa-check-circle" : "fa-exclamation-circle";
            const csrfToken     = $('meta[name="csrf-token"]').attr('content');

            $.ajax({
                url: `/equipment_inventories/${equipmentId}/toggle_status`,
                method: 'POST',
                headers: {'X-CSRF-Token': csrfToken},
                success: function (response) {
                    const statusCell = $(`#status-${equipmentId}`);
                    statusCell.find('i.fa').attr('class', `fa ${newIconClass}`);
                    statusCell.find('span.status-text').text(newStatusText);
                    $(`#toggle-${equipmentId}`).data('status', newStatus);
                }
            });
        });
        
        const csrfToken = $('meta[name="csrf-token"]').attr('content');
        $('.update-button').click(function (e) {
            e.preventDefault();
            console.log("CLICK")
            const equipmentId   = $(this).data('id');
            const currentStatus = $(this).data('status');
            const newStatus     = currentStatus === "Check Out" ? "Check In"   : "Check Out";
            const newStatusText = currentStatus === "Check In"  ? "Checked In" : "Checked Out";

            $.ajax({
                url: `/equipment_inventories/${equipmentId}/toggle_status`,
                method: 'POST',
                headers: {'X-CSRF-Token': csrfToken},
                success: function (response) {
                    $(`#status-${equipmentId}`).text(newStatusText);
                    $(`[data-id="${equipmentId}"]`).text(newStatus).data('status', newStatus);
                }
            });
        });

        let currentSortKey = null;
        let sortOrder = 'default';

        // Sorting function
        $('.sortable').click(function () {
            const sortKey = $(this).data('sort');

            // Reset other headers if a different header is clicked
            if (currentSortKey !== sortKey) {
                $('.sortable').find('i').attr('class', 'fa fa-sort');
                sortOrder = 'default';
            }

            // Update sort order
            if (sortOrder === 'default') {
                sortOrder = 'asc';
            } else if (sortOrder === 'asc') {
                sortOrder = 'desc';
            } else {
                sortOrder = 'default';
            }

            // Update visual indicator
            $(this).find('i').attr('class', sortOrder === 'default' ? 'fa fa-sort' : `fa fa-sort-${sortOrder}`);

            const rows = $('tbody tr').get();
            rows.sort(function (a, b) {
                const A = $(a).data(sortKey).toString().toUpperCase();
                const B = $(b).data(sortKey).toString().toUpperCase();
                if (A < B) {
                    return sortOrder === 'asc' ? -1 : 1;
                }
                if (A > B) {
                    return sortOrder === 'asc' ? 1 : -1;
                }
                return 0;
            });

            if (sortOrder === 'default') {
                // Reload original order (you may need to adjust this part based on how you load the original order)
                location.reload();
            } else {
                $.each(rows, function (index, row) {
                    $('tbody').append(row);
                });
            }
            currentSortKey = sortKey;
        });
    });