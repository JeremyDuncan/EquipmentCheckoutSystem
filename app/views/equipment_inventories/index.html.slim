form#hiddenDeleteForm method="post" style="display:none;"
  input type="hidden" name="_method" value="delete"
  input type="hidden" name="authenticity_token" value="#{form_authenticity_token}"

.container.col
  h1 Equipment Inventory
  i.fa-solid.fa-toolbox.space-bot-xl style="font-size: 7rem"

  = link_to "equipment_inventories/new", class: 'add-button modern-button' do
    i.fa-solid.fa-wrench
    |  Add Equipment

  /## LETTER FILTER SECTION ##
  .letter-filter
    - ('A'..'Z').each do |letter|
      - active_class = (letter == @initial_letter) ? 'active-letter' : ''
      a.letter-link href="#" class="#{active_class}" data-letter=letter = letter


  /## STATUS FILTER SECTION ##
  .status-filter
    label for="status" Filter by status:
    |&nbsp
    select#status.form-control.modern-select
      option value="" All
      option value="0" Checked In
      option value="1" Checked Out
    button#apply_filters.btn.btn-primary.modern-button Apply Filter

    table.dark-table style= "width: 1000px"
      thead
        tr
          th.sortable data-sort="name"  Equipment Name <i class="fa fa-sort"></i>
          th.sortable data-sort="id"    Equipment ID <i class="fa fa-sort"></i>
          th.sortable data-sort="status" Availability <i class="fa fa-sort"></i>
          th Check-In/Out
          th Actions
      tbody
        - @equipment_inventories.each do |equipment|
          tr.row data-name=equipment.equipment_name data-id=equipment.equipment_id data-status=(equipment.checked_in? ? "IN" : "OUT")
            td = equipment.equipment_name
            td = equipment.equipment_id
            td class="status-cell" id="status-#{equipment.id}"
              i.fa class=(equipment.checked_in? ? "fa-check-circle" : "fa-exclamation-circle") aria-hidden="true"
              span.status-text
                - if equipment.checked_in?
                  |  IN
                - else
                  |  OUT
            td
              /## TOGGLE SWITCH ##
              .center-div style="display: flex; justify-content: center"
                .toggle-switch
                  - if equipment.checked_in?
                    input.toggle-switch-checkbox type="checkbox" id="toggle-#{equipment.id}" checked=true data-id=equipment.id data-status="Check Out"
                  - else
                    input.toggle-switch-checkbox type="checkbox" id="toggle-#{equipment.id}" data-id=equipment.id data-status="Check In"
                  label.toggle-switch-label for="toggle-#{equipment.id}"

            td
              .container.no-pad
                = link_to "equipment_inventories/#{equipment.id}", class: 'view-button' do
                  div.no-wrap
                    i.fa-solid.fa-eye
                    |  View
                = link_to "equipment_inventories/#{equipment.id}/edit", class: 'edit-button' do
                  div.no-wrap
                    i.fa-solid.fa-pen-to-square
                    |  Edit
                /## DELETE BUTTON ##
                a.open-modal.delete-button data-url=equipment_inventory_path(equipment)
                  div.no-wrap
                    i.fa-solid.fa-trash
                    |  Delete

    /## PAGINATION SECTION ##
    .pagination
      - if @total_pages > 1
        - (1..@total_pages).each do |page|
          - active_class = (page == params[:page].to_i) ? 'active-page' : ''
          - new_params = request.query_parameters.merge(page: page)
          = link_to page, url_for(new_params), class: "page-link #{active_class}"


    /## DASHBOARD BUTTON ##
    .space-bot-m
    = link_to '/', class: 'dashboard-button' do
      i.fa-solid.fa-house
      |  Back to Dashboard




/###############################################################################
/## MODAL SECTION ##
/###################    
#deleteModal.modal
  .modal-content
    h4.space-bot-xl style="color: black; font-size: 1.2rem" Are you sure you want to delete this equipment? 
    .modal-actions

      /## CONFIRM MODAL BUTTON ##
      = link_to '#', id: 'confirmDelete', class: 'delete-button' do
        i.fa-solid.fa-thumbs-up
        |  Yes, Delete 

      /## CANCEL MODAL BUTTON ##   
      a.btn.modal-close
        i.fa-solid.fa-thumbs-down
        |  No, Cancel 


style
  |
    .sortable { cursor: pointer;}
    .no-wrap {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    /* Style the scrollbar for Chrome, Safari and Opera */
    .table-container::-webkit-scrollbar {
      width: 12px; /* Width of the scrollbar */
    }
    
    .table-container::-webkit-scrollbar-thumb {
      background: #888; /* Color of the scroll thumb */
      border-radius: 10px; /* Roundness of the scroll thumb */
    }
    
    .table-container::-webkit-scrollbar-thumb:hover {
      background: #555; /* Color of the scroll thumb on hover */
    }
    /* Style scrollbar for Firefox */
    .table-container {
      scrollbar-width: thin;
      scrollbar-color: #888 #f1f1f1;
    }
    table.dark-table tr.row td {
        padding: 0;
        margin: 0;
    }


/###############################################################################
/## JAVASCRIPT SECTION ##
/########################          
javascript:
    $(document).ready(function () {
        // Modal handling
        $('tbody').on('click', '.open-modal', function (e) {
            console.log("Open modal clicked");  // Debugging line
            e.preventDefault();
            const deleteUrl = $(this).data('url');
            $('#hiddenDeleteForm').attr('action', deleteUrl);
            $('#deleteModal').show();
        });

        $('#confirmDelete').on('click', function (e) {
            e.preventDefault();
            $('#hiddenDeleteForm').submit();
        });

        $('.modal-close').on('click', function () {
            $('#deleteModal').hide();
        });

        // Use event delegation to attach the event handler to the table body
        $('tbody').on('change', '.toggle-switch-checkbox', function () {
            console.log("Checkbox changed");  // Debugging line
            const equipmentId = $(this).data('id');
            const currentStatus = $(this).data('status');
            console.log(`Equipment ID: ${equipmentId}, Current Status: ${currentStatus}`);  // Debugging line


            const newStatus = currentStatus === "Check Out" ? "Check In" : "Check Out";
            const newStatusText = currentStatus === "Check In" ? " IN" : " OUT";
            const newIconClass = currentStatus === "Check In" ? "fa-check-circle" : "fa-exclamation-circle";
            const csrfToken = $('meta[name="csrf-token"]').attr('content');

            $.ajax({
                url: `/equipment_inventories/${equipmentId}/toggle_status`,
                method: 'POST',
                headers: {'X-CSRF-Token': csrfToken},
                success: function (response) {
                    console.log("Ajax request successful");  // Debugging line
                    console.log(response);  // Debugging line

                    const statusCell = $(`#status-${equipmentId}`);
                    statusCell.find('i.fa').attr('class', `fa ${newIconClass}`);
                    statusCell.find('span.status-text').text(newStatusText);
                    $(`#toggle-${equipmentId}`).data('status', newStatus);
                },
                error: function (error) {
                    console.log("Ajax request failed");  // Debugging line
                    console.log(error);  // Debugging line
                }
            });
        });
        
        // Sorting
        let currentSortKey = null;
        let sortOrder = 'default';

        $('.sortable').click(function () {
            const sortKey = $(this).data('sort');

            if (currentSortKey !== sortKey) {
                $('.sortable').find('i').attr('class', 'fa fa-sort');
                sortOrder = 'default';
            }

            if (sortOrder === 'default') {
                sortOrder = 'asc';
            } else if (sortOrder === 'asc') {
                sortOrder = 'desc';
            } else {
                sortOrder = 'default';
            }

            $(this).find('i').attr('class', sortOrder === 'default' ? 'fa fa-sort' : `fa fa-sort-${sortOrder}`);

            const rows = $('tbody tr').get();
            rows.sort(function (a, b) {
                const A = $(a).data(sortKey).toString().toUpperCase();
                const B = $(b).data(sortKey).toString().toUpperCase();
                if (A < B) {
                    return sortOrder === 'asc' ? -1 : 1;
                }
                if (A > B) {
                    return sortOrder === 'asc' ? 1 : -1;
                }
                return 0;
            });

            if (sortOrder === 'default') {
                location.reload();
            } else {
                $.each(rows, function (index, row) {
                    $('tbody').append(row);
                });
            }
            currentSortKey = sortKey;
        });

        $('#apply_filters').click(function () {
            const initial_letter = $('#initial_letter').val() || 'A';  // Default to 'A'
            const status = $('#status').val();
            const page = 1; // Reset to first page when applying filters

            const url = new URL(window.location.href);
            url.searchParams.set('initial_letter', initial_letter);
            url.searchParams.set('status', status);
            url.searchParams.set('page', page);

            window.location.href = url.toString();
        });

        $('.letter-link').on('click', function (e) {
            e.preventDefault();
            const selectedLetter = $(this).data('letter');
            const url = new URL(window.location.href);
            url.searchParams.set('initial_letter', selectedLetter);
            url.searchParams.set('page', 1);  // Reset to the first page
            window.location.href = url.toString();
        });

    });